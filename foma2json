#!/usr/bin/env ruby
# coding: utf-8
require 'json'
require 'zlib'

class ParseError < StandardError; end

def parse(filename)
  { version: nil, props: nil, sigmas: [], states: [] }.tap do |obj|
    mode = nil
    numnets = 0

    Zlib::GzipReader.open(filename).each_line do |l|
      l.chomp!

      case l
      when /^##foma-net ([0-9]+\.[0-9]+)##/
        mode = nil
        obj[:version] = $1
        numnets += 1
        raise "Only one network per file supported" if numnets > 1
      when '##props##'
        mode = -> (l) { obj[:props] = l.split(' ').map { |x| x.to_i.to_s == x ? x.to_i : x } }
      when '##states##'
        mode = -> (l) { obj[:states] << l.split(' ').map(&:to_i) }
      when '##sigma##'
        mode = -> (l) {
          number, symbol = l.split ' '

          symbol.gsub! '@_EPSILON_SYMBOL_@', ''
          symbol.gsub! '@_IDENTITY_SYMBOL_@', '@ID@'
          symbol.gsub! '@_UNKNOWN_SYMBOL_@', '@UN@'
          obj[:sigmas][number.to_i] = symbol
        }
      when '##end##'
        mode = nil
      when /^##/
        raise ParseError, "unexpected control symbol"
      else
        raise ParseError, "unexpected literal data" unless l

        mode.call(l)
      end
    end
  end
end

if ARGV.length != 1
  puts "Usage: foma2js filename"
  exit 1
end

puts parse(ARGV.first).to_json
