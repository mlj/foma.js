#!/usr/bin/env ruby
# coding: utf-8
require 'json'
require 'zlib'

def parse(f)
  mode = :none
  version = nil
  numnets = 0
  pr = {}
  trans = {}
  sigma = []
  finals = []
  longestsymbollength = 0
  arrstate = nil # keep this state around when reading states

  gz = Zlib::GzipReader.new(f)

  gz.each_line do |l|
    l.chomp!

    case l
    when /##foma-net ([0-9]+\.[0-9]+)##/
      version = $1
      numnets += 1
      raise "Only one network per file supported" if numnets > 1
    when '##props##'
      mode = :props
    when '##sigma##'
      mode = :sigma
    when '##states##'
      mode = :states
    when '##end##'
      mode = :none
    else
      case mode
      when :props
        pr[:arity], pr[:arccount], pr[:statecount], pr[:linecount],
          pr[:finalcount], pr[:pathcount], pr[:is_deterministic],
          pr[:is_pruned], pr[:is_minimized], pr[:is_epsilon_free],
          pr[:is_loop_free], pr[:extras], pr[:name] = l.split ' '
      when :states
        # state in out target final
        transitions = l.split(' ').map(&:to_i)

        if transitions[0] == -1
        elsif transitions[1] == -1 and transitions.length == 4
          arrstate = transitions[0]
          arrfinal = transitions[3]
          finals << arrstate if arrfinal == 1
        else
          case transitions.length
          when 5
            arrstate, arrin, arrout, arrtarget, arrfinal = *transitions
            finals << arrstate if arrfinal == 1
          when 4
            arrstate, arrin, arrtarget, arrfinal = *transitions
            arrout = arrin
            finals << arrstate if arrfinal == 1
          when 3
            arrin, arrout, arrtarget = *transitions
          when 2
            arrin, arrtarget = *transitions
            arrout = arrin
          else
            raise "Unknown state"
          end

          trans[arrstate] ||= {}
          trans[arrstate][sigma[arrin]] ||= []
          trans[arrstate][sigma[arrin]] << { arrtarget.to_i => sigma[arrout] }
        end
      when :sigma
        number, symbol = l.split ' '
        number = number.to_i

        symbol.gsub! '@_EPSILON_SYMBOL_@', ''
        symbol.gsub! '@_IDENTITY_SYMBOL_@', '@ID@'
        symbol.gsub! '@_UNKNOWN_SYMBOL_@', '@UN@'
        sigma[number] = symbol

        longestsymbollength = symbol.length if number > 2 and symbol.length > longestsymbollength
      when :none
        raise "Format error"
      end
    end
  end
  
  gz.close

  obj = {
    :maxlen => longestsymbollength,
    :sigmas => sigma,
    :finals => finals.sort,
    :transitions => trans,
  }
  puts obj.to_json
end

if ARGV.length != 1
  puts "Usage: foma2js filename"
  exit 1
end

File.open(ARGV.first) do |f|
  parse(f)
end

exit 0
