#!/usr/bin/env ruby
# coding: utf-8
require 'json'
require 'zlib'

def parse(file_name)
  obj = { :version => nil, :maxlen => 0, :sigmas => [], :finals => [], :transitions => [] }

  mode = :none
  numnets = 0
#  pr = {}
  arrstate = nil # keep this state around when reading states

  Zlib::GzipReader.open(file_name) do |gz|
    gz.each_line do |l|
      l.chomp!

      case l
      when /^##foma-net ([0-9]+\.[0-9]+)##/
        obj[:version] = $1
        numnets += 1
        raise "Only one network per file supported" if numnets > 1
      when /^##(props|sigma|states|end)##/
        mode = $1.to_sym
      else
        case mode
        when :props
#          pr[:arity], pr[:arccount], pr[:statecount], pr[:linecount],
#            pr[:finalcount], pr[:pathcount], pr[:is_deterministic],
#            pr[:is_pruned], pr[:is_minimized], pr[:is_epsilon_free],
#            pr[:is_loop_free], pr[:extras], pr[:name] = l.split ' '
        when :states
          transitions = l.split(' ').map(&:to_i)

          unless transitions[0] == -1
            case transitions.length
            when 5
              arrstate, arrin, arrout, arrtarget, arrfinal = *transitions
            when 4
              arrstate, arrin, arrtarget, arrfinal = *transitions
              arrout = arrin
            when 3
              arrin, arrout, arrtarget = *transitions
              arrfinal = nil
            when 2
              arrin, arrtarget = *transitions
              arrout = arrin
              arrfinal = nil
            else
              raise "Unknown state"
            end

            unless arrin == -1
              obj[:transitions][arrstate] ||= {}
              obj[:transitions][arrstate][arrin] ||= []
              obj[:transitions][arrstate][arrin] << [arrtarget, arrout]
            end

            obj[:finals] << arrstate if arrfinal == 1
          end
        when :sigma
          number, symbol = l.split ' '

          symbol.gsub! '@_EPSILON_SYMBOL_@', ''
          symbol.gsub! '@_IDENTITY_SYMBOL_@', '@ID@'
          symbol.gsub! '@_UNKNOWN_SYMBOL_@', '@UN@'
          obj[:sigmas][number.to_i] = symbol
        when :none
          raise "Format error"
        end
      end
    end
  end

  obj
end

if ARGV.length != 1
  puts "Usage: foma2js filename"
  exit 1
end

obj = parse(ARGV.first)
puts obj.to_json

exit 0
